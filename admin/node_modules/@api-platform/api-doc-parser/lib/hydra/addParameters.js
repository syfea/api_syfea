"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _Parameter = require("../Parameter");

var _Parameter2 = _interopRequireDefault(_Parameter);

var _fetchResource = require("./fetchResource");

var _fetchResource2 = _interopRequireDefault(_fetchResource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (api) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var promises = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var resource = _step.value;

      var promise = (0, _fetchResource2.default)(resource.url, options).then(function (_ref) {
        var _ref$parameters = _ref.parameters,
            parameters = _ref$parameters === undefined ? [] : _ref$parameters;

        var resourceParameters = [];
        parameters.forEach(function (_ref2) {
          var _ref2$property = _ref2.property,
              property = _ref2$property === undefined ? null : _ref2$property,
              required = _ref2.required,
              variable = _ref2.variable;

          if (null === property) {
            return;
          }

          var _ref3 = resource.fields.find(function (_ref4) {
            var name = _ref4.name;
            return property === name;
          }) || {},
              _ref3$range = _ref3.range,
              range = _ref3$range === undefined ? null : _ref3$range;

          resourceParameters.push(new _Parameter2.default(variable, range, required, ""));
        });

        return resourceParameters;
      });

      promises.push(promise);
    };

    for (var _iterator = (0, _getIterator3.default)(api.resources), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return _promise2.default.all(promises).then(function (values) {
    api.resources.map(function (resource, index) {
      resource.parameters = values[index];
    });

    return api;
  });
};