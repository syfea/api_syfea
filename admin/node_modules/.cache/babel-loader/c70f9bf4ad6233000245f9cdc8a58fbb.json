{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer as formReducer } from 'redux-form';\nimport TranslationProvider from '../i18n/TranslationProvider';\nimport merge from 'lodash/merge';\nimport { createMemoryHistory } from 'history';\nimport createAdminStore from '../createAdminStore';\nexport var defaultStore = {\n  admin: {\n    resources: {},\n    references: {\n      possibleValues: {}\n    },\n    ui: {\n      viewVersion: 1\n    }\n  },\n  form: formReducer({}, {\n    type: '@@FOO'\n  }),\n  i18n: {\n    locale: 'en',\n    messages: {}\n  }\n};\n/**\n * Simulate a react-admin context in unit tests\n *\n * Pass custom store values as store prop\n *\n * @example\n * // in an enzyme test\n * const wrapper = render(\n *     <TestContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>\n *         <Show {...defaultShowProps} />\n *     </TestContext>\n * );\n *\n * @example\n * // in an enzyme test, using jest.\n * const wrapper = render(\n *     <TestContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>\n *         {({ store }) => {\n *              dispatchSpy = jest.spyOn(store, 'dispatch');\n *              return <Show {...defaultShowProps} />\n *         }}\n *     </TestContext>\n * );\n */\n\nvar TestContext =\n/** @class */\nfunction (_super) {\n  __extends(TestContext, _super);\n\n  function TestContext(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.storeWithDefault = null;\n\n    _this.renderChildren = function () {\n      var children = _this.props.children;\n      return typeof children === 'function' ? children({\n        store: _this.storeWithDefault\n      }) : children;\n    };\n\n    var _a = props.store,\n        store = _a === void 0 ? {} : _a,\n        _b = props.enableReducers,\n        enableReducers = _b === void 0 ? false : _b;\n    _this.storeWithDefault = enableReducers ? createAdminStore({\n      initialState: merge(defaultStore, store),\n      dataProvider: function dataProvider() {\n        return Promise.resolve({});\n      },\n      history: createMemoryHistory()\n    }) : createStore(function () {\n      return merge(defaultStore, store);\n    });\n    return _this;\n  }\n\n  TestContext.prototype.render = function () {\n    return React.createElement(Provider, {\n      store: this.storeWithDefault\n    }, React.createElement(TranslationProvider, null, this.renderChildren()));\n  };\n\n  return TestContext;\n}(Component);\n\nexport default TestContext;","map":null,"metadata":{},"sourceType":"module"}