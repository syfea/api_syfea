{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport compose from 'recompose/compose';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar styles = createStyles({\n  chip: {\n    margin: 4\n  }\n});\nexport var ChipField = function ChipField(_a) {\n  var className = _a.className,\n      classes = _a.classes,\n      source = _a.source,\n      _b = _a.record,\n      record = _b === void 0 ? {} : _b,\n      rest = __rest(_a, [\"className\", \"classes\", \"source\", \"record\"]);\n\n  return React.createElement(Chip, __assign({\n    className: classnames(classes.chip, className),\n    label: get(record, source)\n  }, sanitizeRestProps(rest)));\n};\nvar EnhancedChipField = compose(withStyles(styles), pure)(ChipField);\nEnhancedChipField.defaultProps = {\n  addLabel: true\n};\nEnhancedChipField.propTypes = __assign({}, ChipField.propTypes, fieldPropTypes);\nEnhancedChipField.displayName = 'EnhancedChipField';\nexport default EnhancedChipField;","map":null,"metadata":{},"sourceType":"module"}