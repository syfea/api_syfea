{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.default = fetchJsonLd;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Sends a JSON-LD request to the API.\n *\n * @param {string} url\n * @param {object} options\n * @return {Promise.<object>} An object with a response key (the original HTTP response) and an optional body key (the parsed JSON-LD body)\n */\n\n\nfunction fetchJsonLd(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var jsonLdMimeType = \"application/ld+json\";\n\n  if (\"undefined\" === typeof options.headers) {\n    options.headers = new Headers();\n  }\n\n  if (null === options.headers.get(\"Accept\")) {\n    options.headers.set(\"Accept\", jsonLdMimeType);\n  }\n\n  if (\"undefined\" !== options.body && !(typeof FormData !== \"undefined\" && options.body instanceof FormData) && null === options.headers.get(\"Content-Type\")) {\n    options.headers.set(\"Content-Type\", jsonLdMimeType);\n  }\n\n  return fetch(url, options).then(function (response) {\n    var headers = response.headers,\n        status = response.status;\n\n    if (204 === status) {\n      return _promise2.default.resolve({\n        response: response\n      });\n    }\n\n    if (500 <= status || !headers.has(\"Content-Type\") || !headers.get(\"Content-Type\").includes(jsonLdMimeType)) {\n      return _promise2.default.reject({\n        response: response\n      });\n    }\n\n    return _promise2.default.resolve(response.json().then(function (body) {\n      return {\n        response: response,\n        body: body,\n        document: body\n      };\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"script"}