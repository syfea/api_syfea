{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport { shallowEqual } from 'recompose';\nimport withDataProvider from './withDataProvider';\n/**\n * Fetch the data provider and pass the result to a child function\n *\n * @example\n *\n * const UserProfile = ({ record }) => (\n *     <Query type=\"GET_ONE\" resource=\"users\" payload={{ id: record.id }}>\n *         {({ data, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return <div>User {data.username}</div>;\n *         }}\n *     </Query>\n * );\n *\n * @example\n *\n * const payload = {\n *    pagination: { page: 1, perPage: 10 },\n *    sort: { field: 'username', order: 'ASC' },\n * };\n * const UserList = () => (\n *     <Query type=\"GET_LIST\" resource=\"users\" payload={payload}>\n *         {({ data, total, loading, error }) => {\n *             if (loading) { return <Loading />; }\n *             if (error) { return <p>ERROR</p>; }\n *             return (\n *                 <div>\n *                     <p>Total users: {total}</p>\n *                     <ul>\n *                         {data.map(user => <li key={user.username}>{user.username}</li>)}\n *                     </ul>\n *                 </div>\n *             );\n *         }}\n *     </Query>\n * );\n */\n\nvar Query =\n/** @class */\nfunction (_super) {\n  __extends(Query, _super);\n\n  function Query() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      data: null,\n      total: null,\n      loading: true,\n      error: null\n    };\n\n    _this.callDataProvider = function () {\n      var _a = _this.props,\n          dataProvider = _a.dataProvider,\n          type = _a.type,\n          resource = _a.resource,\n          payload = _a.payload,\n          options = _a.options;\n      dataProvider(type, resource, payload, options).then(function (_a) {\n        var data = _a.data,\n            total = _a.total;\n\n        _this.setState({\n          data: data,\n          total: total,\n          loading: false\n        });\n      }).catch(function (error) {\n        _this.setState({\n          error: error,\n          loading: false\n        });\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.callDataProvider();\n    };\n\n    _this.componentDidUpdate = function (prevProps) {\n      if (prevProps.type !== _this.props.type || prevProps.resource !== _this.props.resource || !shallowEqual(prevProps.payload, _this.props.payload) || !shallowEqual(prevProps.options, _this.props.options)) {\n        _this.callDataProvider();\n      }\n    };\n\n    return _this;\n  }\n\n  Query.prototype.render = function () {\n    var children = this.props.children;\n    return children(this.state);\n  };\n\n  return Query;\n}(Component);\n\nexport default withDataProvider(Query);","map":null,"metadata":{},"sourceType":"module"}