{"ast":null,"code":"import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin'; // Change this to be your own authentication token URI.\n\nconst authenticationTokenUri = \"\".concat(process.env, \"/authentication_token\"); //const authenticationTokenUri = `http://www.apisyfea.local/login_check`;\n\nexport default ((type, params) => {\n  switch (type) {\n    case AUTH_LOGIN:\n      const username = params.username,\n            password = params.password;\n      const request = new Request(authenticationTokenUri, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: username,\n          password\n        }),\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        })\n      });\n      return fetch(request).then(response => {\n        if (response.status < 200 || response.status >= 300) throw new Error(response.statusText);\n        return response.json();\n      }).then(({\n        token\n      }) => {\n        localStorage.setItem('token', token); // The JWT token is stored in the browser's local storage\n\n        window.location.replace('/');\n      });\n\n    case AUTH_LOGOUT:\n      localStorage.removeItem('token');\n      break;\n\n    case AUTH_ERROR:\n      if (401 === params.status || 403 === params.status) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n      }\n\n      break;\n\n    case AUTH_CHECK:\n      return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n\n    default:\n      return Promise.resolve();\n  }\n});","map":{"version":3,"sources":["/var/www/html/api_syfea/admin/src/authProvider.js"],"names":["AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","authenticationTokenUri","process","env","type","params","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","fetch","then","response","status","Error","statusText","json","token","localStorage","setItem","window","location","replace","removeItem","Promise","reject","getItem","resolve"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,UAA9C,QAAgE,aAAhE,C,CAEA;;AACA,MAAMC,sBAAsB,aAAMC,OAAO,CAACC,GAAd,0BAA5B,C,CACA;;AAGA,gBAAe,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7B,UAAQD,IAAR;AACI,SAAKP,UAAL;AAAA,YACYS,QADZ,GACmCD,MADnC,CACYC,QADZ;AAAA,YACsBC,QADtB,GACmCF,MADnC,CACsBE,QADtB;AAEI,YAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAYR,sBAAZ,EAAoC;AAChDS,QAAAA,MAAM,EAAE,MADwC;AAEhDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,KAAK,EAAER,QAAT;AAAmBC,UAAAA;AAAnB,SAAf,CAF0C;AAGhDQ,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,0BAAgB;AAAlB,SAAZ;AAHuC,OAApC,CAAhB;AAMA,aAAOC,KAAK,CAACT,OAAD,CAAL,CACFU,IADE,CACGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD,MAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AAErD,eAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,OALE,EAMFL,IANE,CAMG,CAAC;AAAEM,QAAAA;AAAF,OAAD,KAAe;AACjBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B,EADiB,CACqB;;AACtCG,QAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,GAAxB;AACH,OATE,CAAP;;AAWJ,SAAK/B,WAAL;AACI2B,MAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACA;;AAEJ,SAAK/B,UAAL;AACI,UAAI,QAAQM,MAAM,CAACe,MAAf,IAAyB,QAAQf,MAAM,CAACe,MAA5C,EAAoD;AAChDK,QAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AAEA,eAAOC,OAAO,CAACC,MAAR,EAAP;AACH;;AACD;;AAEJ,SAAKhC,UAAL;AACI,aAAOyB,YAAY,CAACQ,OAAb,CAAqB,OAArB,IAAgCF,OAAO,CAACG,OAAR,EAAhC,GAAoDH,OAAO,CAACC,MAAR,EAA3D;;AAEJ;AACI,aAAOD,OAAO,CAACG,OAAR,EAAP;AApCR;AAsCH,CAvCD","sourcesContent":["import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\n// Change this to be your own authentication token URI.\nconst authenticationTokenUri = `${process.env}/authentication_token`;\n//const authenticationTokenUri = `http://www.apisyfea.local/login_check`;\n\n\nexport default (type, params) => {\n    switch (type) {\n        case AUTH_LOGIN:\n            const { username, password } = params;\n            const request = new Request(authenticationTokenUri, {\n                method: 'POST',\n                body: JSON.stringify({ email: username, password }),\n                headers: new Headers({ 'Content-Type': 'application/json' }),\n            });\n\n            return fetch(request)\n                .then(response => {\n                    if (response.status < 200 || response.status >= 300) throw new Error(response.statusText);\n\n                    return response.json();\n                })\n                .then(({ token }) => {\n                    localStorage.setItem('token', token); // The JWT token is stored in the browser's local storage\n                    window.location.replace('/');\n                });\n\n        case AUTH_LOGOUT:\n            localStorage.removeItem('token');\n            break;\n\n        case AUTH_ERROR:\n            if (401 === params.status || 403 === params.status) {\n                localStorage.removeItem('token');\n\n                return Promise.reject();\n            }\n            break;\n\n        case AUTH_CHECK:\n            return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n\n        default:\n            return Promise.resolve();\n    }\n}"]},"metadata":{},"sourceType":"module"}